#!/usr/bin/env node
/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('nwtalkki:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.app.set('port', port);
/**
 * Create HTTP server.
 */
var server = http.createServer(app.app);
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const io = require('socket.io')(server);

io.on('connection', (socket => {
	io.emit('chat message', "someone is connected.");
	// socket.on('connect', () => {
	// 	console.log('socket.on connect msg on server side.');
	//
	// });
	socket.on('chat message', function (msg) {
		console.log('socket.on chat msg on server side.');
		io.emit('chat message', msg);
	});
	// TODO: Broadcast a message to connected users when someone connects or disconnects
	/**
	 * - 서버에서 socket의 client info를 수집 (>> client 정보 저장) >> connected client에게 broadcast msg
	 * - client의 info 수집은 dis/connect event가 일어날 때마다 시행
	 *
	 * 1. find the way to see the user's info(online or offline).
	 * 2. Saved connected users list.
	 * 3. when users' event is happening, broadcast the messages to connected users.
	 */
	// TODO: Add support for nicknames
	/**
	 * 1. find the way to specify each user's info.
	 * 2. naming to users automatically
	 */

	// TODO: Don’t send the same message to the user that sent it himself. Instead, append the message directly as soon as he presses enter.
	// TODO: Add “{user} is typing” functionality
	// TODO: Show who’s online
	// TODO: Add private messaging

	socket.on('disconnect', () => {
		io.emit('chat message', "someone is disconnected.");
	})
}));

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
	var port = parseInt(val, 10);
	if (isNaN(port)) {
		// named pipe
		return val;
	}
	if (port >= 0) {
		// port number
		return port;
	}
	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}
	var bind = typeof port === 'string'
			? 'Pipe ' + port
			: 'Port ' + port;
	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
			? 'pipe ' + addr
			: 'port ' + addr.port;
	debug('Listening on ' + bind);
}

